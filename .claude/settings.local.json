{
  "permissions": {
    "allow": [
      "mcp__task-master-ai__parse_prd",
      "Bash(task-master analyze-complexity:*)",
      "Bash(task-master:*)",
      "mcp__task-master-ai__get_task",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(python3 -m pytest tests/data/ -v --tb=short)",
      "Bash(pip3 install:*)",
      "Bash(PYTHONPATH=/Users/osangwon/github/test/src python3 -c \"from trading_bot.data.binance_client import BinanceClient; print(''BinanceClient imported successfully'')\")",
      "Bash(PYTHONPATH=/Users/osangwon/github/test/src python3:*)",
      "mcp__task-master-ai__set_task_status",
      "Bash(python:*)",
      "Bash(python3 -m flake8:*)",
      "Bash(python3 -m black:*)",
      "Bash(python3 -m isort:*)",
      "Bash(git add:*)",
      "Bash(python3:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: implement comprehensive trading signal generation and validation system\n\nComplete Task 5: 매매 신호 생성 및 검증 시스템\n\n- SignalGenerator: ICT pattern-based signal generation with confidence scoring\n- ConfluenceValidator: Multi-condition signal verification across 6 confluence types\n- SignalStrengthCalculator: 7-category weighted signal strength analysis\n- BiasFilter: Time-based filtering with trading session awareness\n- SignalEventPublisher: Event publishing with multiple modes and batch processing\n- SignalValidityManager: Signal lifecycle and timeout management\n- IntegratedSignalSystem: Complete pipeline integration example\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "mcp__task-master-ai__next_task",
      "mcp__serena__list_dir",
      "mcp__serena__search_for_pattern",
      "mcp__serena__activate_project",
      "mcp__serena__read_file",
      "mcp__smithery-ai-server-sequential-thinking__sequentialthinking",
      "mcp__serena__replace_regex",
      "mcp__serena__create_text_file",
      "mcp__serena__find_file",
      "mcp__serena__get_symbols_overview"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "task-master-ai"
  ]
}