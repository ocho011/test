# 자동매매 프로그램 PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 1.1 목적
- ICT 이론 기반 자동매매 시스템 개발
- 바이낸스 선물거래에서 안정적이고 지속적인 수익 창출
- 24시간 무인 운영을 통한 수동 거래 대비 효율성 향상

### 1.2 핵심 목표
- **수익 목표**: 월 10-15% 안정적 수익
- **리스크 관리**: 거래당 최대 2% 위험
- **운영 목표**: 24시간 무중단 자동 운영
- **확장성**: 단일 코인 → 다중 코인 확장 가능한 구조

## 2. 기능 요구사항

### 2.1 거래 사양
- **거래소**: 바이낸스 무기한 달러 선물 (현재) → 바이낸스 무기한 코인 선물 (향후)
- **거래 대상**: BTC/USDT (MVP) → 복수 코인 확장
- **레버리지**: 안전한 범위 내 설정 (최대 10x 권장)
- **거래 스타일**: 데이 트레이딩 ~ 스윙 트레이딩

### 2.2 매매 전략
#### 2.2.1 ICT 전략 (기본)
- **Order Block + Fair Value Gap (FVG) 조합 전략**
- **시간대 구조**:
  - HTF (4H/Daily): 시장 구조 및 바이어스 확인
  - LTF (5M/15M): 진입점 및 정밀 신호
- **진입 조건**:
  - Order Block 형성 후 FVG 발생
  - 시장 구조 확인 (BOS/CHoCH)
  - 다중 시간대 정렬
- **신호 강도**: 최소 2-3개 confluence 필요

#### 2.2.2 전략 확장성
- 전통적 지표 전략 (RSI, MACD 등) 적용 가능한 구조
- 전략 교체 시 다른 구성요소 변경 최소화
- 실시간 전략 선택 및 적용

### 2.3 리스크 관리
#### 2.3.1 포지션 관리
- **포지션 크기**: 계좌 잔고의 2% 위험
- **스탑로스**: ICT 레벨 기반 (swing high/low)
- **익절**: 1:2 RR 비율 기본, 부분 익절 적용
- **최대 드로우다운**: 일일 5%, 월간 15% 제한

#### 2.3.2 위험 통제
- **연속 손실 제한**: 3회 연속 손실 시 거래 일시 중단
- **일일 거래 제한**: 최대 5회 거래/일
- **시장 변동성 필터**: 비정상적 변동성 시 거래 중단

### 2.4 모니터링 및 알림
- **Discord 알림**:
  - 거래 진입/청산
  - 시스템 오류 및 연결 문제
  - 일일/주간 수익 요약
- **실시간 모니터링**:
  - 포지션 상태
  - 미실현 손익
  - 시스템 상태

## 3. 기술 요구사항

### 3.1 개발 환경
- **언어**: Python 3.9+
- **API**: 바이낸스 공식 Python 라이브러리
- **아키텍처**: 이벤트 기반, 비동기 처리 (asyncio)
- **설계 원칙**: SOLID 원칙, 객체지향 설계

### 3.2 시스템 아키텍처
#### 3.2.1 이벤트 기반 설계
```
MarketDataProvider → TechnicalAnalyzer → SignalGenerator → RiskManager → OrderExecutor
         ↓                ↓                ↓              ↓            ↓
    EventBus ←→ MessageHub ←→ EventBus ←→ EventBus ←→ EventBus
```

#### 3.2.2 핵심 컴포넌트
1. **MarketDataProvider**: 실시간 가격 데이터 수신
2. **TechnicalAnalyzer**: ICT 패턴 및 지표 분석
3. **SignalGenerator**: 매매 신호 생성 및 검증
4. **RiskManager**: 포지션 크기 및 위험 관리
5. **OrderExecutor**: 주문 실행 및 관리
6. **EventBus**: 컴포넌트 간 메시지 전달
7. **NotificationManager**: Discord 알림 처리

### 3.3 데이터 관리
- **실시간 데이터**: WebSocket을 통한 실시간 캔들/틱 데이터
- **히스토리컬 데이터**: 백테스팅 및 분석용 (최소 6개월)
- **설정 관리**: YAML/JSON 기반 설정 파일
- **로그 관리**: 구조화된 로깅 (거래 내역, 시스템 이벤트)

### 3.4 성능 요구사항
- **지연시간**: 신호 생성 후 5초 이내 주문 실행
- **가용성**: 99% 업타임 (연결 끊김 시 자동 재연결)
- **확장성**: 단일 코인 → 10+ 코인 동시 처리 가능

## 4. 운영 요구사항

### 4.1 실행 환경
- **서버**: Vultr 가상머신 (24시간 운영)
- **OS**: Ubuntu 20.04+
- **의존성 관리**: Poetry 또는 pip-tools
- **프로세스 관리**: systemd 또는 supervisord

### 4.2 보안 및 설정
- **API 키 관리**: 환경변수 또는 암호화된 설정 파일
- **접근 권한**: 최소 권한 원칙 (거래 전용 API 키)
- **백업**: 설정 및 로그 자동 백업

### 4.3 모니터링
- **헬스체크**: 시스템 상태 자동 모니터링
- **성능 지표**:
  - 승률, 수익률, 최대 드로우다운
  - API 응답시간, 연결 안정성
  - 일일/주간/월간 성과 리포트

## 5. 개발 로드맵

### 5.1 Phase 1: MVP (2-3개월)
#### 목표: BTC/USDT 단일 코인 ICT 전략 구현
1. **기본 아키텍처 구축** (2주)
   - 이벤트 기반 프레임워크
   - 바이낸스 API 연동
   - 기본 데이터 파이프라인

2. **ICT 분석 엔진 개발** (3주)
   - Order Block 감지 알고리즘
   - Fair Value Gap 분석
   - 다중 시간대 구조 분석

3. **리스크 관리 시스템** (2주)
   - 포지션 크기 계산
   - 스탑로스/익절 로직
   - 드로우다운 관리

4. **주문 실행 시스템** (2주)
   - 자동 주문 실행
   - 포지션 관리
   - 오류 처리

5. **모니터링 및 알림** (1주)
   - Discord 봇 연동
   - 로깅 시스템
   - 기본 대시보드

6. **백테스팅 및 최적화** (2주)
   - 히스토리컬 데이터 검증
   - 파라미터 튜닝
   - 성능 검증

### 5.2 Phase 2: 확장 및 최적화 (1-2개월)
1. **다중 코인 지원**
   - 코인별 설정 관리
   - 자본 배분 알고리즘
   - 상관관계 분석

2. **추가 전략 구현**
   - 전통적 지표 전략
   - 전략 선택 및 교체 시스템
   - A/B 테스팅 프레임워크

3. **고급 리스크 관리**
   - 동적 포지션 크기 조정
   - 시장 상황별 적응형 파라미터
   - 고급 드로우다운 관리

### 5.3 Phase 3: UI 및 고도화 (선택사항)
1. **웹 대시보드**
   - 실시간 모니터링
   - 설정 관리 인터페이스
   - 성과 분석 도구

2. **모바일 인터페이스**
   - 모바일 대시보드
   - 푸시 알림
   - 원격 제어 기능

## 6. 성공 지표

### 6.1 재무 지표
- **월 수익률**: 10-15% 목표
- **샤프 비율**: 1.5 이상
- **최대 드로우다운**: 15% 이하
- **승률**: 60% 이상

### 6.2 운영 지표
- **시스템 가동률**: 99% 이상
- **신호 지연시간**: 5초 이하
- **API 오류율**: 1% 이하

### 6.3 품질 지표
- **코드 커버리지**: 80% 이상
- **백테스팅 일치율**: 95% 이상 (실제 vs 시뮬레이션)

## 7. 위험 요소 및 대응책

### 7.1 기술적 위험
- **API 장애**: 백업 연결 및 자동 재시도
- **네트워크 문제**: 다중 경로 및 VPN 백업
- **시스템 크래시**: 자동 재시작 및 상태 복구

### 7.2 시장 위험
- **급격한 변동성**: 비정상 상황 감지 및 거래 중단
- **유동성 부족**: 주문 크기 제한 및 슬리피지 관리
- **블랙 스완 이벤트**: 최대 포지션 제한 및 긴급 청산

### 7.3 규제 위험
- **거래소 정책 변경**: 다중 거래소 지원 준비
- **세금 및 신고**: 거래 내역 자동 기록 및 보고서 생성

## 8. 결론

본 PRD는 ICT 이론 기반의 안정적이고 확장 가능한 자동매매 시스템 구축을 위한 포괄적 지침을 제공합니다.

**핵심 성공 요소**:
1. **검증된 전략**: Order Block + FVG 조합의 신뢰성 있는 ICT 전략
2. **견고한 리스크 관리**: 2% 리스크, 체계적 손실 관리
3. **확장 가능한 아키텍처**: 이벤트 기반 설계로 미래 확장성 보장
4. **안정적 운영**: 24시간 무인 운영 및 모니터링

이 PRD를 기반으로 단계적 개발을 통해 목표하는 월 10-15% 수익의 안정적인 자동매매 시스템을 구축할 수 있습니다.