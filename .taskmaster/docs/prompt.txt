자동매매프로그램 PRD 작성을 위한 information

[요구사양]
- 거래소 및 마켓: (현재) 바이낸스 무기한달러 선물 -> (장래) 단, 바이낸스 무기한코인선물
- 거래대상 코인 개수: (현재) 대표적인 코인 1개 -> (장래) 복수의 코인
- 매매전략: ict 이론에 기반한 전략을 ‘기본’으로 하되, 전통적인 지표이론에 기반한 전략도 적용가능할 것(즉, 전략만 대체하면 다른 구성요소에 대한 특별한 변경없이도 적용가능할 것) / 실전매매에서 적용되는 전략은 선택가능한 전략 중 1개의 전략 기본 함. 
- 전략에 대해서는 확실한 근거 및 이론적 근거가 있을 것(중요함) / 팩터를 임의로 무분별하게 설정하거나 변경하지 말 것
- 리스크 관리가 우수할 것
- 연결이 안정적으로 유지될 것   

[설계 관련]
- 개발언어: python 기반 , 바이낸스 api 전용 공식 라이브러리를 이용할 것  
- ‘이벤트’ 기반, ‘비동기’ 방식(asyncio, mutithread 등): (예) 1. 중앙 메시징 허브가 모든 컴포넌트 간 비동기 통신을 조율하며, 이벤트  발행-구독 패턴으로 느슨한 결합을 유지한다.  2. 시장 데이터 수신부터 시작하여 기술적 분석, 거래 신호 생성, 리스크  검증, 주문 실행 순으로 파이프라인이 진행된다. 3. 각 단계는 독립적으로 동작하며, 상위 단계의 결과를 이벤트로 발행하면  하위 단계가 이를 수신하여 처리하는 체인 구조이다. 4.  비동기 처리로 여러 분석과 전략이 병렬로 실행되며, 이벤트 기반 아키텍처로 새로운 컴포넌트 추가나 변경이 용이한 확장 가능한 구조
- 객체지향설계:  객체지향에 관한 SOLID 원칙 준수될 것 / 가독성, 확장성, 간결성, 재사용성이 고려될 것
- 가독성을 위해 클래스, 함수, 변수 등의 네이밍에 특히 신경쓸 것(PEP 8 준수) / 네이밍은 가능하면 간결하게 할 것(비동기임을 나타내기 위해 async 등의 접두어를 네임에 포함시키는 것을 남발하지 말것)
- 개발단계에서만 필요한 구성요소(예컨대, 각종 테스트, 임시)는 그 성격에 따라 별도의 디렉토리에서 관리될 것

[운용 및 실행환경]
- 프로그램은 판매용이 아니라 개인적이 용도이며, vultr 가상 머신에서 탑재하여 24시간 운영
- 중요 거래사항은 discord로 알림받기

[개발로드맵시 고려사항]
- 너무 복잡하지 않고 기본(매매동작)에 집중할 것(간략한 매매전략 및 리스크 관리에 기초한 지속적이고 안정적인 수익) / 선택사항에 대한 부분으로 인해 전체 개발이 지연되지 않도록 할 것
-  개발환경에서 마켓, 거래대상코인, 전략 등은 단순하게 설정하여 진행할 것 -> 실행환경에서 모니터링 및 동작제어(실행에 관한 환경변수나 거래대상, 전략 등 설정)용 UI 화면(pc, 핸드폰 모바일)에 대한 개발은, 기본기능이 완성(최소 1개의 전략에 대해 end to end 실전매매에 투입될 정도의 전략 및 매매의 신뢰성이 담보된 상황)된 이후 일것  
 



