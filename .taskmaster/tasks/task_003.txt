# Task ID: 3
# Title: 바이낸스 API 연동 및 시장 데이터 수신 모듈
# Status: done
# Dependencies: 2
# Priority: high
# Description: 바이낸스 선물 거래소 API 연동 및 실시간 시장 데이터 수신 시스템 구축
# Details:
BinanceClient 클래스로 python-binance 라이브러리 래핑. WebSocket을 통한 실시간 캔들 데이터 수신 (5분, 15분, 4시간, 일봉). MarketDataProvider 컴포넌트로 데이터 정규화 및 이벤트 발행. 연결 끊김 시 자동 재연결 로직 (exponential backoff). API 레이트 리미트 관리 (분당 1200 요청). 히스토리컬 데이터 캐싱을 위한 파일 시스템 기반 저장소. asyncio.Semaphore로 동시 요청 수 제한.

# Test Strategy:
WebSocket 연결 안정성 테스트, API 레이트 리미트 테스트, 데이터 무결성 검증

# Subtasks:
## 1. BinanceClient 래퍼 클래스 구현 [done]
### Dependencies: None
### Description: python-binance 라이브러리를 래핑하는 BinanceClient 클래스 구현
### Details:
python-binance 라이브러리를 래핑하여 선물 거래소 API 인터페이스 제공. 비동기 메서드로 시장 데이터 요청, 주문 관리, 계정 정보 조회 기능 구현. 에러 핸들링 및 로깅 기능 포함

## 2. WebSocket 실시간 데이터 수신 시스템 [done]
### Dependencies: 3.1
### Description: 실시간 캔들 데이터 수신을 위한 WebSocket 연결 및 데이터 처리
### Details:
5분, 15분, 4시간, 일봉 캔들 데이터를 WebSocket으로 실시간 수신. MarketDataProvider 컴포넌트로 데이터 정규화 및 이벤트 발행. 멀티플 심볼 동시 구독 지원

## 3. 자동 재연결 로직 구현 [done]
### Dependencies: 3.2
### Description: WebSocket 연결 끊김 시 exponential backoff 기반 자동 재연결
### Details:
네트워크 연결 장애 시 exponential backoff 알고리즘으로 재연결 시도. 최대 재시도 횟수 및 대기 시간 설정 가능. 연결 상태 모니터링 및 알림 기능

## 4. API 레이트 리미트 관리 시스템 [done]
### Dependencies: 3.1
### Description: 바이낸스 API 호출 제한 관리 및 요청 큐잉
### Details:
분당 1200 요청 제한 준수를 위한 레이트 리미터 구현. asyncio.Semaphore로 동시 요청 수 제한. 요청 우선순위 큐 및 대기열 관리

## 5. 히스토리컬 데이터 캐싱 시스템 [done]
### Dependencies: 3.1
### Description: 파일 시스템 기반 히스토리컬 데이터 저장 및 관리
### Details:
파일 시스템 기반 히스토리컬 캔들 데이터 캐싱. 데이터 무결성 검증 및 중복 제거. 압축 저장으로 디스크 사용량 최적화. 캐시 만료 정책 및 자동 정리 기능

