# Task ID: 13
# Title: 라이브 트레이딩 워크플로우 구현
# Status: pending
# Dependencies: None
# Priority: high
# Description: 이벤트 기반 워크플로우 연결: MarketData → ICT Analysis → Signal → Strategy → Order 체인 구현
# Details:
현재 상태: 모든 개별 컴포넌트(ICTAnalyzer, SignalGenerator, Strategies, OrderExecutor)는 구현되어 있으나, 이벤트 핸들러가 없어서 서로 연결되지 않음.

구현 필요사항:
1. MarketDataEvent → CandleClosedEvent 변환 (MarketDataAggregator)
2. CandleClosedEvent → ICT 분석 → SignalEvent (StrategyCoordinator)
3. SignalEvent → 리스크 체크 → RiskApprovedOrderEvent (RiskManager)
4. RiskApprovedOrderEvent → 주문 실행 (OrderExecutor)

새 이벤트 타입:
- CandleClosedEvent: 캔들이 종료되고 OHLCV 데이터가 준비됨
- RiskApprovedOrderEvent: 리스크 체크를 통과한 주문

새 컴포넌트:
- MarketDataAggregator: 실시간 데이터를 OHLCV DataFrame으로 집계
- StrategyCoordinator: 멀티 타임프레임 분석 조율 및 전략 실행

# Test Strategy:
1. Dry-run 모드로 이벤트 체인 검증 (실제 주문 없이)
2. 각 이벤트 핸들러의 단위 테스트
3. 통합 테스트: 실제 시장 데이터 → 신호 생성 → 주문 검증
4. 백테스팅 모드로 과거 데이터 재생 테스트

# Subtasks:
## 1. 새 이벤트 타입 정의 (CandleClosedEvent, RiskApprovedOrderEvent) [pending]
### Dependencies: None
### Description: events.py에 두 가지 새 이벤트 타입 추가
### Details:
CandleClosedEvent:
- symbol: str
- interval: str (5m, 15m, 4h, 1d)
- df: DataFrame (OHLCV 데이터)
- timestamp: datetime
- priority: HIGH

RiskApprovedOrderEvent:
- signal: SignalEvent (원본 신호)
- approved_quantity: Decimal (리스크 체크 후 승인된 수량)
- risk_params: Dict (리스크 파라미터)
- priority: NORMAL

## 2. MarketDataAggregator 컴포넌트 구현 [pending]
### Dependencies: None
### Description: 실시간 MarketDataEvent를 OHLCV DataFrame으로 집계하고 CandleClosedEvent 발행
### Details:
위치: src/trading_bot/data/market_data_aggregator.py

기능:
1. MarketDataEvent 구독 (각 symbol/interval 조합별)
2. 인메모리 캔들 데이터 누적 (pandas DataFrame)
3. 캔들 종료 감지 (interval 기준)
4. CandleClosedEvent 발행 (DataFrame 포함)
5. 과거 데이터 초기화 (BinanceClient 통해)

데이터 구조:
- self._candles: Dict[str, Dict[str, DataFrame]]
  예: {"BTCUSDT": {"5m": df, "15m": df, ...}}

의존성: BinanceClient, EventBus

## 3. StrategyCoordinator 컴포넌트 구현 [pending]
### Dependencies: None
### Description: 멀티 타임프레임 분석 조율 및 전략 실행
### Details:
위치: src/trading_bot/strategies/strategy_coordinator.py

기능:
1. CandleClosedEvent 구독 (모든 interval)
2. 각 interval별 ICT 분석 실행 (ICTAnalyzer)
3. 멀티 타임프레임 confluence 체크
4. 전략 실행 (IntegratedStrategySystem)
5. SignalEvent 발행

로직:
- 5m 캔들 종료 → 5m ICT 분석 → 즉시 전략 실행 가능
- 15m/4h/1d 캔들 종료 → 해당 타임프레임 분석 → confluence 업데이트
- Confluence 조건 충족 시 고품질 신호 생성

의존성: ICTAnalyzer, IntegratedStrategySystem, EventBus

## 4. RiskManager에 SignalEvent 핸들러 추가 [pending]
### Dependencies: None
### Description: SignalEvent 수신 시 리스크 체크 후 RiskApprovedOrderEvent 발행
### Details:
수정 파일: src/trading_bot/risk/risk_manager.py

추가 기능:
1. SignalEvent 구독 등록
2. _handle_signal_event() 메서드 추가:
   - 포지션 사이즈 계산 (calculate_position_size)
   - 리스크 체크 (check_new_position_risk)
   - 통과 시: RiskApprovedOrderEvent 발행
   - 실패 시: RiskEvent 발행 (위험 경고)

이미 구현된 메서드 활용:
- calculate_position_size()
- check_new_position_risk()
- _calculate_max_position_size()

## 5. OrderExecutor에 자동 주문 실행 추가 [pending]
### Dependencies: None
### Description: RiskApprovedOrderEvent 수신 시 자동으로 주문 실행
### Details:
수정 파일: src/trading_bot/execution/order_executor.py

추가 기능:
1. RiskApprovedOrderEvent 구독 등록
2. _handle_risk_approved_order() 메서드 추가:
   - SignalEvent에서 주문 파라미터 추출
   - 승인된 수량으로 주문 생성
   - 기존 execute_order() 메서드 호출

주문 생성 로직:
- BUY signal → MARKET BUY order
- SELL signal → MARKET SELL order
- stop_loss, take_profit은 PositionTracker가 관리

이미 구현된 메서드 활용:
- execute_order()
- _validate_order()

## 6. SystemIntegrator에 새 컴포넌트 등록 [pending]
### Dependencies: None
### Description: MarketDataAggregator, StrategyCoordinator를 SystemIntegrator에 등록
### Details:
수정 파일: src/trading_bot/system_integrator.py

추가 작업:
1. _register_data_components()에 MarketDataAggregator 등록
   - MarketDataProvider 다음 순서
   - BinanceClient, EventBus 의존성 주입

2. _register_strategy_components()에 StrategyCoordinator 등록
   - ICTAnalyzer, IntegratedStrategySystem, EventBus 의존성 주입

3. 시작 순서 확인:
   - DATA layer: BinanceClient → MarketDataProvider → MarketDataAggregator
   - ANALYSIS layer: ICTAnalyzer
   - SIGNAL layer: StrategyCoordinator
   - STRATEGY layer: IntegratedStrategySystem

## 7. Dry-run 모드 구현 [pending]
### Dependencies: None
### Description: 실제 주문 없이 전체 워크플로우 검증할 수 있는 dry-run 모드
### Details:
수정 파일: 
- src/trading_bot/execution/order_executor.py
- src/trading_bot/config/settings.py

기능:
1. Config에 dry_run 플래그 추가
2. OrderExecutor._handle_risk_approved_order()에서:
   - dry_run=True: 로그만 출력, 주문 미실행
   - dry_run=False: 실제 주문 실행
3. 시뮬레이션 주문 이벤트 발행 (테스트용)

로그 포맷:
[DRY-RUN] Order would be executed: BUY 0.01 BTCUSDT @ MARKET
[DRY-RUN] Stop Loss: 95000, Take Profit: 105000

## 8. 통합 테스트 및 검증 [pending]
### Dependencies: None
### Description: 전체 이벤트 체인 통합 테스트
### Details:
테스트 파일: tests/integration/test_trading_workflow.py

테스트 시나리오:
1. MarketData 주입 테스트:
   - 가짜 MarketDataEvent 발행
   - CandleClosedEvent 생성 확인
   - ICT 분석 실행 확인
   - SignalEvent 생성 확인

2. 리스크 체크 테스트:
   - SignalEvent 발행
   - RiskApprovedOrderEvent 생성 확인
   - 리스크 초과 시 거부 확인

3. 주문 실행 테스트 (dry-run):
   - RiskApprovedOrderEvent 발행
   - 주문 로그 출력 확인
   - 실제 API 호출 없음 확인

4. 전체 체인 테스트:
   - MarketData → Candle → Analysis → Signal → Risk → Order
   - 각 단계의 이벤트 발행 확인
   - 타이밍 및 순서 검증

