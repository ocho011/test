# Task ID: 9
# Title: 설정 관리 및 로깅 시스템
# Status: done
# Dependencies: 8
# Priority: medium
# Description: YAML 기반 설정 관리, 구조화된 로깅 및 환경별 설정 분리
# Details:
ConfigManager 클래스로 YAML 설정 파일 관리. 환경별 설정: development.yml, production.yml, testing.yml. pydantic으로 설정 검증 및 타입 체크. LogManager로 구조화된 로깅 (JSON 포맷). 로그 레벨: DEBUG, INFO, WARNING, ERROR, CRITICAL. 로그 로테이션 및 압축. 거래 이벤트 전용 트레이드 로그. 시스템 성능 메트릭 로깅. 민감 정보 마스킹 처리.

# Test Strategy:
설정 파일 검증 테스트, 로그 포맷 확인, 로그 로테이션 동작 검증

# Subtasks:
## 1. ConfigManager 및 YAML 설정 파일 구현 [done]
### Dependencies: None
### Description: YAML 기반 설정 관리 시스템과 환경별 설정 파일 구조 구현
### Details:
ConfigManager 클래스 구현으로 YAML 설정 파일 로딩 및 관리. 환경별 설정 파일 생성: development.yml, production.yml, testing.yml. pydantic 모델을 사용한 설정 검증 및 타입 체크. 환경 변수를 통한 설정 파일 자동 선택 기능. 설정 값 캐싱 및 런타임 설정 변경 지원.

## 2. LogManager 구조화된 로깅 시스템 구현 [done]
### Dependencies: 9.1
### Description: JSON 포맷 기반의 구조화된 로깅 시스템 및 로그 레벨 관리
### Details:
LogManager 클래스로 구조화된 로깅 구현. JSON 포맷으로 로그 출력 및 구조화. 로그 레벨 관리: DEBUG, INFO, WARNING, ERROR, CRITICAL. 컨텍스트 정보 포함한 로그 메시지 생성. 비동기 로깅 지원으로 성능 최적화. 로그 필터링 및 조건부 로깅 기능.

## 3. 로그 로테이션 및 압축 시스템 구현 [done]
### Dependencies: 9.2
### Description: 로그 파일 자동 로테이션, 압축 및 보관 정책 구현
### Details:
시간/크기 기반 로그 로테이션 구현. 오래된 로그 파일 자동 압축 기능. 로그 보관 정책 설정 (보관 기간, 최대 파일 수). 디스크 공간 모니터링 및 자동 정리. 거래 이벤트 전용 트레이드 로그 분리 관리. 시스템 성능 메트릭 전용 로그 생성.

## 4. 민감 정보 마스킹 및 보안 로깅 구현 [done]
### Dependencies: 9.2
### Description: API 키, 계정 정보 등 민감한 데이터의 자동 마스킹 처리
### Details:
민감 정보 자동 탐지 및 마스킹 기능 구현. API 키, 계정 번호, 개인정보 등 패턴 기반 마스킹. 로그 출력 전 민감 정보 스크러빙. 보안 감사를 위한 별도 보안 로그 생성. 마스킹 규칙 설정 파일 관리. 디버깅 모드에서의 선택적 마스킹 해제 기능.

